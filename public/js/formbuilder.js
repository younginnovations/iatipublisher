"use strict";
(self["webpackChunk"] = self["webpackChunk"] || []).push([["/js/formbuilder"],{

/***/ "./resources/assets/js/scripts/DynamicField.ts":
/*!*****************************************************!*\
  !*** ./resources/assets/js/scripts/DynamicField.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {



function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.DynamicField = void 0;
var jquery_1 = __importDefault(__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"));
__webpack_require__(/*! select2 */ "./node_modules/select2/dist/js/select2.js");
var DynamicField = /*#__PURE__*/function () {
  function DynamicField() {
    _classCallCheck(this, DynamicField);
  }
  _createClass(DynamicField, [{
    key: "hideShowFormFields",
    value:
    /**
     * Hide and Show different form fields based on vocabulary and other types
     */
    function hideShowFormFields() {
      this.humanitarianScopeHideVocabularyUri();
      this.countryBudgetHideCodeField();
      this.aidTypeVocabularyHideField();
      this.sectorVocabularyHideField();
      this.policyVocabularyHideField();
      this.recipientVocabularyHideField();
      this.sectorVocabularyHideField();
      this.tagVocabularyHideField();
      this.transactionAidTypeVocabularyHideField();
      this.indicatorReferenceHideFieldUri();
    }
    /**
     * Humanitarian Scope Form Page
     *
     * @Logic hide vocabulary-uri field based on '@vocabulary' field value
     */
  }, {
    key: "humanitarianScopeHideVocabularyUri",
    value: function humanitarianScopeHideVocabularyUri() {
      var _this = this;
      var humanitarianScopeVocabulary = (0, jquery_1["default"])('select[id^="humanitarian_scope"][id*="[vocabulary]"]');
      if (humanitarianScopeVocabulary.length > 0) {
        // hide fields on page load
        jquery_1["default"].each(humanitarianScopeVocabulary, function (index, scope) {
          var _a;
          var val = (_a = (0, jquery_1["default"])(scope).val()) !== null && _a !== void 0 ? _a : '';
          _this.hideHumanitarianScopeField((0, jquery_1["default"])(scope), val.toString());
        });
        // hide/show fields on value change
        humanitarianScopeVocabulary.on('select2:select', function (e) {
          var val = e.params.data.id;
          var index = e.target;
          _this.hideHumanitarianScopeField((0, jquery_1["default"])(index), val);
        });
        // hide/show fields on value clear
        humanitarianScopeVocabulary.on('select2:clear', function (e) {
          var index = e.target;
          _this.hideHumanitarianScopeField((0, jquery_1["default"])(index), '');
        });
      }
    }
    // hide country budget based on vocabulary
  }, {
    key: "hideHumanitarianScopeField",
    value: function hideHumanitarianScopeField(index, value) {
      var humanitarianScopeHideVocabularyUri = 'input[id^="humanitarian_scope"][id*="[vocabulary_uri]"]';
      if (value === '99') {
        index.closest('.form-field-group').find(humanitarianScopeHideVocabularyUri).show().removeAttr('disabled').closest('.form-field').show();
      } else {
        index.closest('.form-field-group').find(humanitarianScopeHideVocabularyUri).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
      }
    }
    /**
     * Humanitarian Scope Form Page
     *
     * @Logic hide vocabulary-uri field based on '@vocabulary' field value
     */
  }, {
    key: "indicatorReferenceHideFieldUri",
    value: function indicatorReferenceHideFieldUri() {
      var _this2 = this;
      var referenceVocabulary = (0, jquery_1["default"])('select[id^="reference"][id*="[vocabulary]"]');
      if (referenceVocabulary.length > 0) {
        // hide fields on page load
        jquery_1["default"].each(referenceVocabulary, function (index, scope) {
          var _a;
          var val = (_a = (0, jquery_1["default"])(scope).val()) !== null && _a !== void 0 ? _a : '';
          _this2.indicatorReferenceHideField((0, jquery_1["default"])(scope), val.toString());
        });
        // hide/show fields on value change
        referenceVocabulary.on('select2:select', function (e) {
          var val = e.params.data.id;
          var index = e.target;
          _this2.indicatorReferenceHideField((0, jquery_1["default"])(index), val);
        });
        // hide/show fields on value clear
        referenceVocabulary.on('select2:clear', function (e) {
          var index = e.target;
          _this2.indicatorReferenceHideField((0, jquery_1["default"])(index), '');
        });
      }
    }
    // hide country budget based on vocabulary
  }, {
    key: "indicatorReferenceHideField",
    value: function indicatorReferenceHideField(index, value) {
      var referenceUri = 'input[id^="reference"][id*="[indicator_uri]"]';
      if (value === '99') {
        index.closest('.form-field-group').find(referenceUri).show().removeAttr('disabled').closest('.form-field').show();
      } else {
        index.closest('.form-field-group').find(referenceUri).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
      }
    }
    /**
     * Country Budget Form Page
     *
     * @Logic show/hide 'code' field based on '@vocabulary' field value
     */
  }, {
    key: "countryBudgetHideCodeField",
    value: function countryBudgetHideCodeField() {
      var _this3 = this;
      var _a;
      var countryBudgetVocabulary = (0, jquery_1["default"])('select#country_budget_vocabulary');
      if (countryBudgetVocabulary.length > 0) {
        // hide/show on page load
        var val = (_a = countryBudgetVocabulary.val()) !== null && _a !== void 0 ? _a : '1';
        this.hideCountryBudgetField(val.toString());
        // hide/show on value change
        countryBudgetVocabulary.on('select2:select', function (e) {
          var val = e.params.data.id;
          _this3.hideCountryBudgetField(val);
        });
        //hide/show based on value cleared
        countryBudgetVocabulary.on('select2:clear', function () {
          _this3.hideCountryBudgetField('');
        });
      }
    }
    /**
     * Hide Country Budget Fields
     */
  }, {
    key: "hideCountryBudgetField",
    value: function hideCountryBudgetField(value) {
      var countryBudgetCodeInput = 'input[id^="budget_item"][id*="[code_text]"]',
        countryBudgetCodeSelect = 'select[id^="budget_item"][id*="[code]"]';
      if (value === '1') {
        (0, jquery_1["default"])(countryBudgetCodeSelect).val('').trigger('change').attr('disabled', 'disabled').closest('.form-field').hide();
        (0, jquery_1["default"])(countryBudgetCodeInput).removeAttr('disabled').closest('.form-field').show();
      } else {
        (0, jquery_1["default"])(countryBudgetCodeSelect).removeAttr('disabled').closest('.form-field').show();
        (0, jquery_1["default"])(countryBudgetCodeInput).val('').trigger('change').closest('.form-field').hide();
      }
    }
    /**
     * AidType Form Page
     *
     * @Logic hide vocabulary-uri and codes field based on '@vocabulary' field value
     */
  }, {
    key: "aidTypeVocabularyHideField",
    value: function aidTypeVocabularyHideField() {
      var _this4 = this;
      var aidtype_vocabulary = (0, jquery_1["default"])('select[id*="default_aid_type_vocabulary"]');
      if (aidtype_vocabulary.length > 0) {
        jquery_1["default"].each(aidtype_vocabulary, function (index, item) {
          var _a;
          var data = (_a = (0, jquery_1["default"])(item).val()) !== null && _a !== void 0 ? _a : '1';
          _this4.hideAidTypeSelectField((0, jquery_1["default"])(item), data.toString());
        });
        aidtype_vocabulary.on('select2:select', function (e) {
          var data = e.params.data.id;
          var target = e.target;
          _this4.hideAidTypeSelectField((0, jquery_1["default"])(target), data);
        });
        aidtype_vocabulary.on('select2:clear', function (e) {
          var target = e.target;
          _this4.hideAidTypeSelectField((0, jquery_1["default"])(target), '');
        });
      }
    }
    /**
     * AidType Form Page
     *
     * @Logic hide vocabulary-uri and codes field based on '@vocabulary' field value
     */
  }, {
    key: "transactionAidTypeVocabularyHideField",
    value: function transactionAidTypeVocabularyHideField() {
      var _this5 = this;
      var aidtype_vocabulary = (0, jquery_1["default"])('select[id*="aid_type_vocabulary"]');
      if (aidtype_vocabulary.length > 0) {
        jquery_1["default"].each(aidtype_vocabulary, function (index, item) {
          var _a;
          var data = (_a = (0, jquery_1["default"])(item).val()) !== null && _a !== void 0 ? _a : '1';
          _this5.hideTransactionAidTypeSelectField((0, jquery_1["default"])(item), data.toString());
        });
        aidtype_vocabulary.on('select2:select', function (e) {
          var data = e.params.data.id;
          var target = e.target;
          _this5.hideTransactionAidTypeSelectField((0, jquery_1["default"])(target), data);
        });
        aidtype_vocabulary.on('select2:clear', function (e) {
          var target = e.target;
          _this5.hideTransactionAidTypeSelectField((0, jquery_1["default"])(target), '');
        });
      }
    }
    /**
     * Hide Aid Type Select Fields
     */
  }, {
    key: "hideAidTypeSelectField",
    value: function hideAidTypeSelectField(index, value) {
      var default_aid_type = 'select[id*="[default_aid_type]"]',
        earmarking_category = 'select[id*="[earmarking_category]"]',
        earmarking_modality = 'select[id*="[earmarking_modality]"]',
        cash_and_voucher_modalities = 'select[id*="[cash_and_voucher_modalities]"]',
        case1 = 'select[id*="[earmarking_category]"],select[id*="[earmarking_modality]"],select[id*="[cash_and_voucher_modalities]"]',
        case2 = 'select[id*="[default_aid_type]"],select[id*="[earmarking_modality]"],select[id*="[cash_and_voucher_modalities]"]',
        case3 = 'select[id*="[default_aid_type]"],select[id*="[earmarking_category]"],select[id*="[cash_and_voucher_modalities]"]',
        case4 = 'select[id*="[default_aid_type]"],select[id*="[earmarking_category]"],select[id*="[earmarking_modality]"]';
      switch (value) {
        case '2':
          index.closest('.form-field-group').find(earmarking_category).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case2).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '3':
          index.closest('.form-field-group').find(earmarking_modality).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case3).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '4':
          index.closest('.form-field-group').find(cash_and_voucher_modalities).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case4).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        default:
          index.closest('.form-field-group').find(default_aid_type).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case1).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
      }
    }
    /**
     * Hide Transaction Aid Type Select Fields
     */
  }, {
    key: "hideTransactionAidTypeSelectField",
    value: function hideTransactionAidTypeSelectField(index, value) {
      var aid_type = 'select[id*="[aid_type_code]"]',
        earmarking_category = 'select[id*="[earmarking_category]"]',
        earmarking_modality = 'select[id*="[earmarking_modality]"]',
        cash_and_voucher_modalities = 'select[id*="[cash_and_voucher_modalities]"]',
        case1 = 'select[id*="[earmarking_category]"],select[id*="[earmarking_modality]"],select[id*="[cash_and_voucher_modalities]"]',
        case2 = 'select[id*="[aid_type_code]"],select[id*="[earmarking_modality]"],select[id*="[cash_and_voucher_modalities]"]',
        case3 = 'select[id*="[aid_type_code]"],select[id*="[earmarking_category]"],select[id*="[cash_and_voucher_modalities]"]',
        case4 = 'select[id*="[aid_type_code]"],select[id*="[earmarking_category]"],select[id*="[earmarking_modality]"]';
      switch (value) {
        case '2':
          index.closest('.form-field-group').find(earmarking_category).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case2).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '3':
          index.closest('.form-field-group').find(earmarking_modality).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case3).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '4':
          index.closest('.form-field-group').find(cash_and_voucher_modalities).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case4).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        default:
          index.closest('.form-field-group').find(aid_type).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case1).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
      }
    }
    /**
     * Policy Marker Form Page
     *
     * @Logic hide vocabulary-uri and codes field based on '@vocabulary' field value
     */
  }, {
    key: "policyVocabularyHideField",
    value: function policyVocabularyHideField() {
      var _this6 = this;
      var policymaker_vocabulary = (0, jquery_1["default"])('select[id*="policy_marker_vocabulary"]');
      if (policymaker_vocabulary.length > 0) {
        jquery_1["default"].each(policymaker_vocabulary, function (index, policy_marker) {
          var _a;
          var data = (_a = (0, jquery_1["default"])(policy_marker).val()) !== null && _a !== void 0 ? _a : '1';
          _this6.hidePolicyMakerField((0, jquery_1["default"])(policy_marker), data.toString());
        });
        policymaker_vocabulary.on('select2:select', function (e) {
          var data = e.params.data.id;
          var target = e.target;
          _this6.hidePolicyMakerField((0, jquery_1["default"])(target), data);
        });
        policymaker_vocabulary.on('select2:clear', function (e) {
          var target = e.target;
          _this6.hidePolicyMakerField((0, jquery_1["default"])(target), '99');
        });
      }
    }
    /**
     * Hides Policy Marker Form Fields
     */
  }, {
    key: "hidePolicyMakerField",
    value: function hidePolicyMakerField(index, value) {
      var case1_show = 'select[id*="[policy_marker]"]',
        case2_show = 'input[id*="[policy_marker_text]"],input[id*="[vocabulary_uri]"]',
        case1 = 'input[id*="[policy_marker_text]"],input[id*="[vocabulary_uri]"]',
        case2 = 'select[id*="[policy_marker]"]';
      switch (value) {
        case '1':
          index.closest('.form-field-group').find(case1_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case1).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '99':
        default:
          index.closest('.form-field-group').find(case2_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case2).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
      }
    }
    /**
     * Sector Form Page
     *
     * @Logic hide vocabulary-uri and codes field based on '@vocabulary' field value
     */
  }, {
    key: "sectorVocabularyHideField",
    value: function sectorVocabularyHideField() {
      var _this7 = this;
      var sector_vocabulary = (0, jquery_1["default"])('select[id*="sector_vocabulary"]');
      if (sector_vocabulary.length > 0) {
        jquery_1["default"].each(sector_vocabulary, function (index, sector) {
          var _a;
          var data = (_a = (0, jquery_1["default"])(sector).val()) !== null && _a !== void 0 ? _a : '1';
          _this7.hideSectorField((0, jquery_1["default"])(sector), data.toString());
        });
        sector_vocabulary.on('select2:select', function (e) {
          var data = e.params.data.id;
          var target = e.target;
          _this7.hideSectorField((0, jquery_1["default"])(target), data);
        });
        sector_vocabulary.on('select2:clear', function (e) {
          var target = e.target;
          _this7.hideSectorField((0, jquery_1["default"])(target), '');
        });
      }
    }
    /**
     * Hide Sector Form fields
     */
  }, {
    key: "hideSectorField",
    value: function hideSectorField(index, value) {
      var case1_show = 'select[id*="[code]"]',
        case2_show = 'select[id*="[category_code]"]',
        case7_show = 'select[id*="[sdg_goal]"]',
        case8_show = 'select[id*="[sdg_target]"]',
        case98_99_show = 'input[id*="[text]"],input[id*="[vocabulary_uri]"]',
        default_show = 'input[id*="[text]"]',
        case1 = 'select[id*="[category_code]"],select[id*="[sdg_goal]"],select[id*="[sdg_target]"],input[id*="[vocabulary_uri]"],input[id*="[text]"]',
        case2 = 'input[id*="[vocabulary_uri]"],select[id*="[sdg_goal]"],select[id*="[sdg_target]"],select[id*="[code]"],input[id*="[text]"]',
        case7 = 'input[id*="[vocabulary_uri]"],select[id*="[category_code]"],select[id*="[sdg_target]"],select[id*="[code]"],input[id*="[text]"]',
        case8 = 'input[id*="[vocabulary_uri]"],select[id*="[category_code]"],select[id*="[sdg_goal]"],select[id*="[code]"],input[id*="[text]"]',
        case98_99 = 'select[id*="[category_code]"],select[id*="[sdg_goal]"],select[id*="[sdg_target]"],select[id*="[code]"]',
        default_hide = 'select[id*="[category_code]"],select[id*="[sdg_goal]"],select[id*="[sdg_target]"],select[id*="[code]"],input[id*="[vocabulary_uri]"]';
      switch (value) {
        case '1':
          index.closest('.form-field-group').find(case1_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case1).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '2':
          index.closest('.form-field-group').find(case2_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case2).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '7':
          index.closest('.form-field-group').find(case7_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case7).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '8':
          index.closest('.form-field-group').find(case8_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case8).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '98':
          index.closest('.form-field-group').find(case98_99_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case98_99).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '99':
          index.closest('.form-field-group').find(case98_99_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case98_99).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        default:
          index.closest('.form-field-group').find(default_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(default_hide).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
      }
    }
    /**
     *  Recipient Vocabulary Form Page
     *
     * @Logic hide vocabulary-uri and codes field based on '@vocabulary' field value
     */
  }, {
    key: "recipientVocabularyHideField",
    value: function recipientVocabularyHideField() {
      var _this8 = this;
      var region_vocabulary = (0, jquery_1["default"])('select[id*="region_vocabulary"]');
      if (region_vocabulary.length > 0) {
        jquery_1["default"].each(region_vocabulary, function (index, region_vocab) {
          var _a;
          var data = (_a = (0, jquery_1["default"])(region_vocab).val()) !== null && _a !== void 0 ? _a : '1';
          _this8.hideRecipientRegionField((0, jquery_1["default"])(region_vocab), data.toString());
        });
        region_vocabulary.on('select2:select', function (e) {
          var data = e.params.data.id;
          var target = e.target;
          _this8.hideRecipientRegionField((0, jquery_1["default"])(target), data);
        });
        region_vocabulary.on('select2:clear', function (e) {
          var target = e.target;
          _this8.hideRecipientRegionField((0, jquery_1["default"])(target), '');
        });
      }
    }
    /**
     * Hides Recipient Region Form Fields
     */
  }, {
    key: "hideRecipientRegionField",
    value: function hideRecipientRegionField(index, value) {
      var case1_show = 'select[id*="[region_code]"]',
        case2_show = 'input[id*="[custom_code]"], input[id*="[code]"]',
        case99_show = 'input[id*="[custom_code]"],input[id*="[vocabulary_uri]"], input[id*="[code]"]',
        case1 = 'input[id*="[custom_code]"],input[id*="[vocabulary_uri]"],input[id*="[code]"]',
        case2 = 'select[id*="[region_code]"],input[id*="[vocabulary_uri]"]',
        case99 = 'select[id*="[region_code]"]';
      switch (value) {
        case '1':
          index.closest('.form-field-group').find(case1_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case1).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '2':
          index.closest('.form-field-group').find(case2_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case2).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '99':
          index.closest('.form-field-group').find(case99_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case99).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        default:
          index.closest('.form-field-group').find(case2_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case2).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
      }
    }
    /**
     * Updates Activity identifier
     */
  }, {
    key: "updateActivityIdentifier",
    value: function updateActivityIdentifier() {
      var activity_identifier = (0, jquery_1["default"])('#activity_identifier');
      if (activity_identifier.length > 0) {
        activity_identifier.on('keyup', function () {
          (0, jquery_1["default"])('#iati_identifier_text').val((0, jquery_1["default"])('.identifier').attr('activity_identifier') + "-".concat((0, jquery_1["default"])(this).val()));
        });
      }
    }
    /**
     * Tag Form Page
     *
     * @Logic hide vocabulary-uri and codes field based on '@vocabulary' field value
     */
  }, {
    key: "tagVocabularyHideField",
    value: function tagVocabularyHideField() {
      var _this9 = this;
      var tag_vocabulary = (0, jquery_1["default"])('select[id*="tag_vocabulary"]');
      if (tag_vocabulary.length > 0) {
        jquery_1["default"].each(tag_vocabulary, function (index, tag) {
          var _a;
          var data = (_a = (0, jquery_1["default"])(tag).val()) !== null && _a !== void 0 ? _a : '1';
          _this9.hideTagField((0, jquery_1["default"])(tag), data.toString());
        });
        tag_vocabulary.on('select2:select', function (e) {
          var data = e.params.data.id;
          var target = e.target;
          _this9.hideTagField((0, jquery_1["default"])(target), data);
        });
        tag_vocabulary.on('select2:clear', function (e) {
          var target = e.target;
          _this9.hideTagField((0, jquery_1["default"])(target), '');
        });
      }
    }
    /**
     * Hide Tag Form fields
     */
  }, {
    key: "hideTagField",
    value: function hideTagField(index, value) {
      var case1_show = 'input[id*="[tag_text]"]',
        case2_show = 'select[id*="[goals_tag_code]"]',
        case3_show = 'select[id*="[targets_tag_code]"]',
        case99_show = 'input[id*="[tag_text]"], input[id*="[vocabulary_uri]"]',
        case1 = 'select[id*="[goals_tag_code]"],select[id*="[targets_tag_code]"],input[id*="[vocabulary_uri]"]',
        case2 = 'input[id*="[vocabulary_uri]"],select[id*="[targets_tag_code]"],select[id*="[targets_tag_code]"],input[id*="[tag_text]"]',
        case3 = 'input[id*="[vocabulary_uri]"],select[id*="[goals_tag_code]"],input[id*="[tag_text]"]',
        case99 = 'select[id*="[goals_tag_code]"],select[id*="[targets_tag_code]"]';
      switch (value) {
        case '1':
          index.closest('.form-field-group').find(case1_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case1).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '2':
          index.closest('.form-field-group').find(case2_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case2).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '3':
          index.closest('.form-field-group').find(case3_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case3).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '99':
          index.closest('.form-field-group').find(case99_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case99).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        default:
          index.closest('.form-field-group').find(case1_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case1).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
      }
    }
  }]);
  return DynamicField;
}();
exports.DynamicField = DynamicField;
/*
 *
 * Help Text Open Close Handlers Start
 *
 */
(0, jquery_1["default"])(document).on('click', function (event) {
  if (!(0, jquery_1["default"])(event.target).closest('.help').length) {
    (0, jquery_1["default"])('.help__text').removeAttr('style');
  }
});
(0, jquery_1["default"])(document).on('click', '.help', function (event) {
  event.stopPropagation();
  console.log('Hello');
  (0, jquery_1["default"])('.help__text').removeAttr('style');
  var helpText = (0, jquery_1["default"])(this).find('.help__text');
  if (helpText.length > 0) {
    helpText.css({
      opacity: '1',
      visibility: 'visible'
    });
  }
  if ((0, jquery_1["default"])(event.target).closest('.close-help').length) {
    closeHelpText(helpText);
  }
});
(0, jquery_1["default"])(document).on('keydown', function (event) {
  if (event.key === 'Escape') {
    (0, jquery_1["default"])('.help__text').each(function () {
      closeHelpText((0, jquery_1["default"])(this));
    });
  }
});
/**
 * Closes the help text tooltip by setting its CSS properties to make it invisible and non-interactive.
 * After a delay, it removes the inline styles to reset the element's state.
 *
 * @param helpText - The jQuery object representing the tooltip element to be closed.
 */
function closeHelpText(helpText) {
  helpText.css({
    'pointer-events': 'none',
    opacity: '0',
    visibility: 'invisible'
  });
  setTimeout(function () {
    helpText.removeAttr('style');
  }, 1000);
}
/*
 *
 * Help Text Open Close Handlers End
 *
 */

/***/ }),

/***/ "./resources/assets/js/scripts/formbuilder.ts":
/*!****************************************************!*\
  !*** ./resources/assets/js/scripts/formbuilder.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {



function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
var axios_1 = __importDefault(__webpack_require__(/*! axios */ "./node_modules/axios/dist/browser/axios.cjs"));
var jquery_1 = __importDefault(__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"));
__webpack_require__(/*! select2 */ "./node_modules/select2/dist/js/select2.js");
var DynamicField_1 = __webpack_require__(/*! ./DynamicField */ "./resources/assets/js/scripts/DynamicField.ts");
var language_1 = __importDefault(__webpack_require__(/*! Services/language */ "./resources/assets/js/services/language.ts"));
var dynamicField = new DynamicField_1.DynamicField();
var FormBuilder = /*#__PURE__*/function () {
  function FormBuilder() {
    _classCallCheck(this, FormBuilder);
  }
  _createClass(FormBuilder, [{
    key: "addForm",
    value:
    // adds new collection of sub-element
    function addForm(ev) {
      ev.preventDefault();
      var target = ev.target;
      var container = (0, jquery_1["default"])(target).attr('form_type') ? (0, jquery_1["default"])(".collection-container[form_type ='".concat((0, jquery_1["default"])(target).attr('form_type'), "']")) : (0, jquery_1["default"])('.collection-container');
      var count = (0, jquery_1["default"])(target).attr('child_count') ? parseInt((0, jquery_1["default"])(target).attr('child_count')) + 1 : (0, jquery_1["default"])(target).parent().find('.form-child-body').length;
      var parent_count = (0, jquery_1["default"])(target).attr('parent_count') ? parseInt((0, jquery_1["default"])(target).attr('parent_count')) : (0, jquery_1["default"])(target).parents('.multi-form').index() - 1;
      var wrapper_parent_count = (0, jquery_1["default"])(target).attr('wrapped_parent_count') ? parseInt((0, jquery_1["default"])(target).attr('wrapped_parent_count')) : (0, jquery_1["default"])(target).parents('.wrapped-child-body').index() - 1;
      var proto = container.data('prototype').replace(/__PARENT_NAME__/g, parent_count);
      if ((0, jquery_1["default"])(target).attr('has_child_collection')) {
        proto = proto.replace(/__WRAPPER_NAME__/g, count);
        proto = proto.replace(/__NAME__/g, 0);
      } else {
        proto = proto.replace(/__NAME__/g, count);
        proto = proto.replace(/__WRAPPER_NAME__/g, wrapper_parent_count);
      }
      (0, jquery_1["default"])(target).prev().append((0, jquery_1["default"])(proto));
      if ((0, jquery_1["default"])(target).attr('has_child_collection')) {
        (0, jquery_1["default"])(target).prev('.subelement').children('.wrapped-child-body').last().find('.add_to_collection').attr('wrapped_parent_count', count);
        (0, jquery_1["default"])(target).prev('.subelement').children('.wrapped-child-body').last().find('.add_to_collection').attr('parent_count', parent_count);
      }
      (0, jquery_1["default"])(target).prev().find('.wrapped-child-body').last().find('.add_to_collection').attr('wrapper_parent_count', wrapper_parent_count !== null && wrapper_parent_count !== void 0 ? wrapper_parent_count : 0);
      if ((0, jquery_1["default"])(target).attr('form_type')) {
        (0, jquery_1["default"])(target).prev().last().find('.select2').select2({
          placeholder: 'Select an option',
          allowClear: true
        });
        (0, jquery_1["default"])(this).find('.sub-attribute').wrapAll((0, jquery_1["default"])('<div class="form-field-group flex flex-wrap sub-attribute-wrapper"></div>'));
        (0, jquery_1["default"])(target).prev('.subelement').children('.wrapped-child-body').last().find('.sub-attribute').wrapAll((0, jquery_1["default"])('<div class="form-field-group flex flex-wrap sub-attribute-wrapper mt-6"></div>'));
      } else {
        (0, jquery_1["default"])(target).parent().find('.form-child-body').last().find('.select2').select2({
          placeholder: 'Select an option',
          allowClear: true
        });
      }
      (0, jquery_1["default"])(target).attr('child_count', count);
      dynamicField.aidTypeVocabularyHideField();
      dynamicField.sectorVocabularyHideField();
    }
    // adds parent collection
  }, {
    key: "addParentForm",
    value: function addParentForm(ev) {
      ev.preventDefault();
      var target = ev.target;
      var container = (0, jquery_1["default"])(target).attr('form_type') ? (0, jquery_1["default"])(".parent-collection[form_type ='".concat((0, jquery_1["default"])(target).attr('form_type'), "']")) : (0, jquery_1["default"])('.parent-collection');
      var count = (0, jquery_1["default"])(target).attr('parent_count') ? parseInt((0, jquery_1["default"])(target).attr('parent_count')) + 1 : ((0, jquery_1["default"])(target).prev().find('.multi-form').length ? (0, jquery_1["default"])(target).prev().find('.multi-form').length : (0, jquery_1["default"])(target).prev().find('.wrapped-child-body').length) + 1;
      var proto = container.data('prototype').replace(/__PARENT_NAME__/g, count);
      proto = proto.replace(/__NAME__/g, 0);
      (0, jquery_1["default"])(target).prev().append((0, jquery_1["default"])(proto));
      (0, jquery_1["default"])(target).prev().find('.multi-form').last().find('.select2').select2({
        placeholder: 'Select an option',
        allowClear: true
      });
      (0, jquery_1["default"])(target).prev().find('.multi-form').last().find('.add_to_collection').attr('parent_count', count);
      this.addWrapperOnAdd(target);
      (0, jquery_1["default"])(target).attr('parent_count', count);
      dynamicField.humanitarianScopeHideVocabularyUri();
      dynamicField.countryBudgetHideCodeField();
      dynamicField.sectorVocabularyHideField();
      dynamicField.recipientVocabularyHideField();
      dynamicField.policyVocabularyHideField();
      dynamicField.tagVocabularyHideField();
      dynamicField.transactionAidTypeVocabularyHideField();
      dynamicField.indicatorReferenceHideFieldUri();
    }
    // deletes collection
  }, {
    key: "deleteForm",
    value: function deleteForm(ev) {
      ev.preventDefault();
      var target = ev.target;
      var collectionLength = (0, jquery_1["default"])('.multi-form').length ? (0, jquery_1["default"])(target).closest('.subelement').find('.form-child-body').length : (0, jquery_1["default"])('.form-child-body').length;
      var count = (0, jquery_1["default"])('.add_to_collection').attr('child_count') ? parseInt((0, jquery_1["default"])('.add_to_collection').attr('child_count')) + 1 : collectionLength;
      (0, jquery_1["default"])('.add_to_collection').attr('child_count', count);
      if (collectionLength > 1) {
        var tg = (0, jquery_1["default"])(target).closest('.form-child-body');
        tg.next('.error').remove();
        tg.remove();
      }
    }
    // deletes parent collection
  }, {
    key: "deleteParentForm",
    value: function deleteParentForm(ev) {
      ev.preventDefault();
      var target = ev.target;
      var collectionLength = (0, jquery_1["default"])('.subelement').length;
      var count = (0, jquery_1["default"])('.add_to_parent').attr('child_count') ? parseInt((0, jquery_1["default"])('.add_to_parent').attr('child_count')) + 1 : collectionLength;
      (0, jquery_1["default"])('.add_to_parent').attr('child_count', count);
      (0, jquery_1["default"])('.add_to_parent').attr('parent_count', count);
      if (collectionLength > 2) {
        (0, jquery_1["default"])(target).parent().remove();
      }
    }
    //add wrapper div around the attributes
  }, {
    key: "addWrapper",
    value: function addWrapper() {
      (0, jquery_1["default"])('.multi-form').each(function () {
        (0, jquery_1["default"])(this).find('.attribute').wrapAll((0, jquery_1["default"])('<div class="form-field-group flex flex-wrap attribute-wrapper mb-4"></div>'));
      });
      (0, jquery_1["default"])('.subelement').find('.wrapped-child-body').each(function () {
        (0, jquery_1["default"])(this).find('.sub-attribute').wrapAll((0, jquery_1["default"])('<div class="form-field-group flex flex-wrap sub-attribute-wrapper mb-4"></div>'));
      });
      var formField = (0, jquery_1["default"])('form>.form-field');
      if (formField.length > 0) {
        formField.wrapAll('<div class="form-field-group-outer grid xl:grid-cols-2 mb-6 -mx-3 gap-y-6"></div>');
      }
    }
  }, {
    key: "addWrapperOnAdd",
    value: function addWrapperOnAdd(target) {
      (0, jquery_1["default"])(target).prev().find('.multi-form').last().find('.attribute').wrapAll((0, jquery_1["default"])('<div class="form-field-group grid xl:grid-cols-2 attribute-wrapper mb-4"></div>'));
      (0, jquery_1["default"])(target).prev().find('.multi-form').last().find('.subelement').find('.wrapped-child-body').each(function () {
        (0, jquery_1["default"])(this).find('.sub-attribute').wrapAll((0, jquery_1["default"])('<div class="form-field-group flex flex-wrap sub-attribute-wrapper mb-4"></div>'));
      });
    }
  }, {
    key: "textAreaHeight",
    value: function textAreaHeight(ev) {
      var target = ev.target;
      var height = target.scrollHeight;
      (0, jquery_1["default"])(target).css('height', height);
    }
  }, {
    key: "addToCollection",
    value: function addToCollection() {
      var _this = this;
      (0, jquery_1["default"])('body').on('click', '.add_to_collection', function (event) {
        if ((0, jquery_1["default"])(event.target).hasClass('add-icon')) {
          event.stopPropagation();
          (0, jquery_1["default"])(event.target).parent('button').trigger('click');
        } else {
          _this.addForm(event);
          _this.handleDeleteParentButtons();
        }
      });
      (0, jquery_1["default"])('.add_to_parent').on('click', function (event) {
        if ((0, jquery_1["default"])(event.target).hasClass('add-icon')) {
          event.stopPropagation();
          (0, jquery_1["default"])(event.target).parent('button').trigger('click');
        } else {
          _this.addParentForm(event);
          _this.handleDeleteParentButtons();
        }
      });
    }
  }, {
    key: "deleteCollection",
    value: function deleteCollection() {
      var _this2 = this;
      var deleteConfirmation = (0, jquery_1["default"])('.delete-confirmation'),
        cancelPopup = '.cancel-popup',
        deleteConfirm = '.delete-confirm';
      var deleteIndex = {},
        childOrParent = '';
      (0, jquery_1["default"])('body').on('click', '.delete', function (event) {
        deleteConfirmation.fadeIn();
        deleteIndex = event;
        childOrParent = 'child';
      });
      (0, jquery_1["default"])('body').on('click', cancelPopup, function () {
        deleteConfirmation.fadeOut();
        deleteIndex = {};
        childOrParent = '';
      });
      (0, jquery_1["default"])('body').on('click', deleteConfirm, function () {
        if (childOrParent === 'child') {
          _this2.deleteForm(deleteIndex);
        } else if (childOrParent === 'parent') {
          _this2.deleteParentForm(deleteIndex);
        }
        deleteConfirmation.fadeOut();
        deleteIndex = {};
        childOrParent = '';
      });
      (0, jquery_1["default"])('body').on('mouseenter', '.delete-parent', function (event) {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        //@ts-ignore
        var deleteButton = (0, jquery_1["default"])(event.target);
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        //@ts-ignore
        var multiForm = deleteButton.closest('.multi-form, .wrapped-child-body');
        multiForm.css({
          background: '#FFF8F7',
          outline: '2px solid #F19BA0'
        });
      });
      (0, jquery_1["default"])('body').on('mouseleave', '.delete-parent', function (event) {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        //@ts-ignore
        var deleteButton = (0, jquery_1["default"])(event.target);
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        //@ts-ignore
        var multiForm = deleteButton.closest('.multi-form, .wrapped-child-body');
        multiForm.css({
          background: '',
          outline: ''
        });
      });
      (0, jquery_1["default"])('body').on('click', '.delete-parent', function (event) {
        deleteConfirmation.fadeIn();
        deleteIndex = event;
        childOrParent = 'parent';
      });
      (0, jquery_1["default"])('.select2').select2({
        placeholder: 'Select an option',
        allowClear: true
      });
      // update format on change of document link
      (0, jquery_1["default"])('body').on('change', 'input[id*="[url]"]', function () {
        var _this3 = this;
        var _a;
        var filePath = ((_a = (0, jquery_1["default"])(this).val()) !== null && _a !== void 0 ? _a : '').toString();
        var document = (0, jquery_1["default"])(this).closest('.form-field-group').find('input[id*="[document]"]').val();
        var url = "/mimetype?url=".concat(filePath, "&type=url");
        (0, jquery_1["default"])(this).closest('.form-field').find('.text-danger').remove();
        if (filePath !== '') {
          axios_1["default"].get(url).then(function (response) {
            if (response.data.success) {
              var format = response.data.data.mimetype;
              (0, jquery_1["default"])(_this3).closest('.form-field-group').find('select[id*="[format]"]').val(format).trigger('change');
            } else {
              (0, jquery_1["default"])(_this3).closest('.form-field').find('.text-danger').remove();
              (0, jquery_1["default"])(_this3).closest('.form-field').append("<div class='text-danger error'>" + response.data.message + '</div>');
              (0, jquery_1["default"])(_this3).closest('.form-field-group').find('select[id*="[format]"]').val('').trigger('change');
            }
            (0, jquery_1["default"])(_this3).closest('.form-field-group').find('input[id*="[document]"]').val('').trigger('change');
          });
        } else if (!document || document === '') {
          (0, jquery_1["default"])(this).closest('.form-field-group').find('select[id*="[format]"]').val('').trigger('change');
        }
      });
      (0, jquery_1["default"])('body').on('change', 'input[id*="[document]"]', function () {
        var _this4 = this;
        var _a;
        var filePath = ((_a = (0, jquery_1["default"])(this).val()) !== null && _a !== void 0 ? _a : '').toString();
        var url = "/mimetype?url=".concat(filePath, "&&type=document");
        var fileUrl = (0, jquery_1["default"])(this).closest('.form-field-group').find('input[id*="[url]"]').val();
        (0, jquery_1["default"])(this).closest('.form-field').find('.text-danger').remove();
        if (filePath !== '') {
          axios_1["default"].get(url).then(function (response) {
            if (response.data.success) {
              var format = response.data.data.mimetype;
              (0, jquery_1["default"])(_this4).closest('.form-field-group').find('select[id*="[format]"]').val(format).trigger('change');
            } else {
              (0, jquery_1["default"])(_this4).closest('.form-field-group').find('select[id*="[format]"]').val('').trigger('change');
            }
          });
          (0, jquery_1["default"])(this).closest('.form-field-group').find('input[id*="[url]"]').val('').trigger('change');
        } else if (!fileUrl || fileUrl === '') {
          (0, jquery_1["default"])(this).closest('.form-field-group').find('select[id*="[format]"]').val('').trigger('change');
        }
      });
    }
  }, {
    key: "handleDeleteParentButtons",
    value: function handleDeleteParentButtons() {
      var deleteButtons = document.querySelectorAll('.delete-parent-selector');
      var changeDeleteButtonInnerHtml = function changeDeleteButtonInnerHtml(button) {
        var initialText = escapeHtml(button.textContent);
        button.innerHTML = "\n         <svg class=\"text-[1rem] mb-0.5\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n           <path d=\"M6.66667 12C6.84348 12 7.01305 11.9298 7.13807 11.8047C7.2631 11.6797 7.33333 11.5101 7.33333 11.3333V7.33334C7.33333 7.15653 7.2631 6.98696 7.13807 6.86193C7.01305 6.73691 6.84348 6.66667 6.66667 6.66667C6.48986 6.66667 6.32029 6.73691 6.19526 6.86193C6.07024 6.98696 6 7.15653 6 7.33334V11.3333C6 11.5101 6.07024 11.6797 6.19526 11.8047C6.32029 11.9298 6.48986 12 6.66667 12ZM13.3333 4H10.6667V3.33334C10.6667 2.8029 10.456 2.2942 10.0809 1.91912C9.70581 1.54405 9.1971 1.33334 8.66667 1.33334H7.33333C6.8029 1.33334 6.29419 1.54405 5.91912 1.91912C5.54405 2.2942 5.33333 2.8029 5.33333 3.33334V4H2.66667C2.48986 4 2.32029 4.07024 2.19526 4.19526C2.07024 4.32029 2 4.48986 2 4.66667C2 4.84348 2.07024 5.01305 2.19526 5.13807C2.32029 5.2631 2.48986 5.33334 2.66667 5.33334H3.33333V12.6667C3.33333 13.1971 3.54405 13.7058 3.91912 14.0809C4.29419 14.456 4.8029 14.6667 5.33333 14.6667H10.6667C11.1971 14.6667 11.7058 14.456 12.0809 14.0809C12.456 13.7058 12.6667 13.1971 12.6667 12.6667V5.33334H13.3333C13.5101 5.33334 13.6797 5.2631 13.8047 5.13807C13.9298 5.01305 14 4.84348 14 4.66667C14 4.48986 13.9298 4.32029 13.8047 4.19526C13.6797 4.07024 13.5101 4 13.3333 4ZM6.66667 3.33334C6.66667 3.15652 6.7369 2.98696 6.86193 2.86193C6.98695 2.73691 7.15652 2.66667 7.33333 2.66667H8.66667C8.84348 2.66667 9.01305 2.73691 9.13807 2.86193C9.2631 2.98696 9.33333 3.15652 9.33333 3.33334V4H6.66667V3.33334ZM11.3333 12.6667C11.3333 12.8435 11.2631 13.0131 11.1381 13.1381C11.013 13.2631 10.8435 13.3333 10.6667 13.3333H5.33333C5.15652 13.3333 4.98695 13.2631 4.86193 13.1381C4.7369 13.0131 4.66667 12.8435 4.66667 12.6667V5.33334H11.3333V12.6667ZM9.33333 12C9.51014 12 9.67971 11.9298 9.80474 11.8047C9.92976 11.6797 10 11.5101 10 11.3333V7.33334C10 7.15653 9.92976 6.98696 9.80474 6.86193C9.67971 6.73691 9.51014 6.66667 9.33333 6.66667C9.15652 6.66667 8.98695 6.73691 8.86193 6.86193C8.73691 6.98696 8.66667 7.15653 8.66667 7.33334V11.3333C8.66667 11.5101 8.73691 11.6797 8.86193 11.8047C8.98695 11.9298 9.15652 12 9.33333 12Z\" fill=\"#E34D5B\"/>\n         </svg>\n         ".concat(initialText, "\n      ");
      };
      deleteButtons.forEach(function (button) {
        changeDeleteButtonInnerHtml(button);
      });
    }
  }]);
  return FormBuilder;
}();
(0, jquery_1["default"])(function () {
  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var currentLanguage, formBuilder, textAreaTarget, updateRegistrationAgency, subelement, i, title, errorContainer, childCount, readOnlySelects, _i, select, selectElementParentWrapper, selectElementParent, selectElement, deleteButtons, changeDeleteButtonInnerHtml, observer, attachCollapsableButtonEvents, errorMessageExists, getClosestLabelDom, getOptionalTextDom, getClosestParentSubelementDom, toggleOptionalText, toggleAccordionItems, attachInitialCollapsableButtonEvents, observeNewCollapsableButtons;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            observeNewCollapsableButtons = function _observeNewCollapsabl(currentLanguage) {
              var observer = new MutationObserver(function (mutationsList) {
                mutationsList.forEach(function (mutation) {
                  if (mutation.type === 'childList') {
                    mutation.addedNodes.forEach(function (node) {
                      if (node instanceof HTMLElement) {
                        var newCollapsableButtons = node.querySelectorAll('.collapsable-button');
                        newCollapsableButtons.forEach(function (button) {
                          return attachCollapsableButtonEvents(button, currentLanguage);
                        });
                      }
                    });
                  }
                });
              });
              observer.observe(document.body, {
                childList: true,
                subtree: true
              });
            };
            attachInitialCollapsableButtonEvents = function _attachInitialCollaps(currentLanguage) {
              var allCollapsableButtons = document.querySelectorAll('.collapsable-button');
              allCollapsableButtons.forEach(function (button) {
                return attachCollapsableButtonEvents(button, currentLanguage);
              });
            };
            toggleAccordionItems = function _toggleAccordionItems(subelement) {
              function isAddAdditionalButtonOutside(subelement) {
                var nextSibling = subelement.nextElementSibling;
                if (nextSibling && nextSibling.tagName === 'BUTTON') {
                  return nextSibling.classList.contains('add_more') && nextSibling.classList.contains('button');
                }
                return false;
              }
              var hideableSubelements = _toConsumableArray(subelement.children).filter(function (child) {
                return child.tagName !== 'LABEL';
              });
              var outsideButton = null;
              var hasAddAdditionalButtonOutside = isAddAdditionalButtonOutside(subelement);
              if (hasAddAdditionalButtonOutside) {
                outsideButton = subelement.nextElementSibling;
                if (outsideButton) {
                  outsideButton.classList.toggle('display-none');
                }
              }
              hideableSubelements.forEach(function (child) {
                if (hasAddAdditionalButtonOutside && outsideButton) {
                  subelement.classList.toggle('mb-6');
                }
                if (child.classList.contains('height-hide')) {
                  child.classList.remove('height-hide');
                  child.classList.add('height-show');
                } else {
                  child.classList.remove('height-show');
                  child.classList.add('height-hide');
                }
              });
            };
            toggleOptionalText = function _toggleOptionalText(optionalLabel) {
              var currentLanguage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en';
              console.log('currentLanguage');
              console.log(currentLanguage);
              var optionalLabelString = 'Optional';
              if (currentLanguage === 'fr') {
                optionalLabelString = 'fr_Optional';
              } else if (currentLanguage === 'es') {
                optionalLabelString = 'es_Optional';
              }
              var optionalLabelWithSvg = "<svg viewBox=\"0 0 16 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M6 9a1.87 1.87 0 1 0 3.74 0A1.87 1.87 0 0 0 6 9Z\" fill=\"#68797E\"></path>\n        </svg>\n        <span>\n          ".concat(optionalLabelString, "\n        </span>");
              var optionalLabelWithBrackets = "<span>( ".concat(optionalLabelString, " )</span>");
              var svgExists = optionalLabel.querySelector('svg') !== null;
              if (svgExists) {
                optionalLabel.innerHTML = optionalLabelWithBrackets;
              } else {
                optionalLabel.innerHTML = optionalLabelWithSvg;
              }
            };
            getClosestParentSubelementDom = function _getClosestParentSube(label) {
              return label.closest('.subelement.rounded-t-sm');
            };
            getOptionalTextDom = function _getOptionalTextDom(label) {
              return label.querySelector('.optional-text');
            };
            getClosestLabelDom = function _getClosestLabelDom(button) {
              return button.closest('label');
            };
            errorMessageExists = function _errorMessageExists(subelement) {
              var errorDivs = subelement.querySelectorAll('.error');
              var errorTexts = subelement.querySelectorAll('.text-danger-error');
              var _iterator = _createForOfIteratorHelper(errorDivs),
                _step;
              try {
                for (_iterator.s(); !(_step = _iterator.n()).done;) {
                  var div = _step.value;
                  if (div.textContent.trim() !== '') {
                    return true;
                  }
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }
              var _iterator2 = _createForOfIteratorHelper(errorTexts),
                _step2;
              try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                  var _div = _step2.value;
                  if (_div.textContent.trim() !== '') {
                    return true;
                  }
                }
              } catch (err) {
                _iterator2.e(err);
              } finally {
                _iterator2.f();
              }
              return false;
            };
            attachCollapsableButtonEvents = function _attachCollapsableBut(button, currentLanguage) {
              var label = getClosestLabelDom(button);
              var optionalLabel = label ? getOptionalTextDom(label) : null;
              var subelement = label ? getClosestParentSubelementDom(label) : null;
              var thisButtonBelongsToOptionalForm = optionalLabel !== null;
              button.addEventListener('click', function () {
                if (optionalLabel) {
                  toggleOptionalText(optionalLabel, currentLanguage);
                }
                if (subelement) {
                  toggleAccordionItems(subelement);
                }
                button.classList.toggle('rotate-180');
              });
              if (thisButtonBelongsToOptionalForm && !errorMessageExists(subelement)) {
                button.click();
              }
            };
            changeDeleteButtonInnerHtml = function _changeDeleteButtonIn(button) {
              var initialText = escapeHtml(button.textContent);
              button.innerHTML = "\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M6.66667 12C6.84348 12 7.01305 11.9298 7.13807 11.8047C7.2631 11.6797 7.33333 11.5101 7.33333 11.3333V7.33334C7.33333 7.15653 7.2631 6.98696 7.13807 6.86193C7.01305 6.73691 6.84348 6.66667 6.66667 6.66667C6.48986 6.66667 6.32029 6.73691 6.19526 6.86193C6.07024 6.98696 6 7.15653 6 7.33334V11.3333C6 11.5101 6.07024 11.6797 6.19526 11.8047C6.32029 11.9298 6.48986 12 6.66667 12ZM13.3333 4H10.6667V3.33334C10.6667 2.8029 10.456 2.2942 10.0809 1.91912C9.70581 1.54405 9.1971 1.33334 8.66667 1.33334H7.33333C6.8029 1.33334 6.29419 1.54405 5.91912 1.91912C5.54405 2.2942 5.33333 2.8029 5.33333 3.33334V4H2.66667C2.48986 4 2.32029 4.07024 2.19526 4.19526C2.07024 4.32029 2 4.48986 2 4.66667C2 4.84348 2.07024 5.01305 2.19526 5.13807C2.32029 5.2631 2.48986 5.33334 2.66667 5.33334H3.33333V12.6667C3.33333 13.1971 3.54405 13.7058 3.91912 14.0809C4.29419 14.456 4.8029 14.6667 5.33333 14.6667H10.6667C11.1971 14.6667 11.7058 14.456 12.0809 14.0809C12.456 13.7058 12.6667 13.1971 12.6667 12.6667V5.33334H13.3333C13.5101 5.33334 13.6797 5.2631 13.8047 5.13807C13.9298 5.01305 14 4.84348 14 4.66667C14 4.48986 13.9298 4.32029 13.8047 4.19526C13.6797 4.07024 13.5101 4 13.3333 4ZM6.66667 3.33334C6.66667 3.15652 6.7369 2.98696 6.86193 2.86193C6.98695 2.73691 7.15652 2.66667 7.33333 2.66667H8.66667C8.84348 2.66667 9.01305 2.73691 9.13807 2.86193C9.2631 2.98696 9.33333 3.15652 9.33333 3.33334V4H6.66667V3.33334ZM11.3333 12.6667C11.3333 12.8435 11.2631 13.0131 11.1381 13.1381C11.013 13.2631 10.8435 13.3333 10.6667 13.3333H5.33333C5.15652 13.3333 4.98695 13.2631 4.86193 13.1381C4.7369 13.0131 4.66667 12.8435 4.66667 12.6667V5.33334H11.3333V12.6667ZM9.33333 12C9.51014 12 9.67971 11.9298 9.80474 11.8047C9.92976 11.6797 10 11.5101 10 11.3333V7.33334C10 7.15653 9.92976 6.98696 9.80474 6.86193C9.67971 6.73691 9.51014 6.66667 9.33333 6.66667C9.15652 6.66667 8.98695 6.73691 8.86193 6.86193C8.73691 6.98696 8.66667 7.15653 8.66667 7.33334V11.3333C8.66667 11.5101 8.73691 11.6797 8.86193 11.8047C8.98695 11.9298 9.15652 12 9.33333 12Z\" fill=\"#E34D5B\"/>\n      </svg>\n      ".concat(initialText);
            };
            updateRegistrationAgency = function _updateRegistrationAg(country) {
              var endpoint = country.val() ? '/organisation/agency/' + country.val() : '/organisation/agency/';
              jquery_1["default"].ajax({
                url: endpoint
              }).then(function (response) {
                var _a;
                var current_val = (_a = (0, jquery_1["default"])('#organization_registration_agency').val()) !== null && _a !== void 0 ? _a : '';
                var val = false;
                (0, jquery_1["default"])('#organization_registration_agency').empty();
                for (var data in response.data) {
                  if (data === current_val) {
                    val = true;
                  }
                  (0, jquery_1["default"])('#organization_registration_agency').append(new Option(response.data[data], data, true, true)).val('').trigger('change');
                }
                (0, jquery_1["default"])('#organization_registration_agency').val(val ? current_val : '').trigger('change');
              });
            };
            _context.next = 13;
            return language_1["default"].getLanguage();
          case 13:
            currentLanguage = _context.sent;
            formBuilder = new FormBuilder();
            formBuilder.addWrapper();
            dynamicField.hideShowFormFields();
            dynamicField.updateActivityIdentifier();
            formBuilder.addToCollection();
            formBuilder.deleteCollection();
            /**
             * Text area height on typing
             */
            textAreaTarget = (0, jquery_1["default"])('textarea.form__input');
            if (textAreaTarget.length > 0) {
              (0, jquery_1["default"])('body').on('input', 'textarea.form__input', function (event) {
                formBuilder.textAreaHeight(event);
              });
            }
            (0, jquery_1["default"])('body').on('select2:open', '.select2', function () {
              var select_search = document.querySelector('.select2-search__field');
              if (select_search) {
                select_search.focus();
              }
            });
            /**
             * checks registration agency, country and registration number to deduce identifier
             */
            updateRegistrationAgency((0, jquery_1["default"])('#organization_country'));
            (0, jquery_1["default"])('#organisation_identifier').attr('disabled', 'disabled');
            (0, jquery_1["default"])('body').on('select2:select', '#organization_country', function () {
              updateRegistrationAgency((0, jquery_1["default"])(this));
            });
            (0, jquery_1["default"])('body').on('select2:clear', '#organization_country', function () {
              updateRegistrationAgency((0, jquery_1["default"])(this));
            });
            (0, jquery_1["default"])('body').on('select2:select', '#organization_registration_agency', function () {
              var identifier = (0, jquery_1["default"])(this).val() + '-' + (0, jquery_1["default"])('#registration_number').val();
              (0, jquery_1["default"])('#organisation_identifier').val(identifier);
            });
            (0, jquery_1["default"])('body').on('select2:clear', '#organization_registration_agency', function () {
              var identifier = '-' + (0, jquery_1["default"])('#registration_number').val();
              (0, jquery_1["default"])('#organisation_identifier').val(identifier);
            });
            (0, jquery_1["default"])('body').on('keyup', '#registration_number', function () {
              var identifier = (0, jquery_1["default"])('#organization_registration_agency').val() + '-' + (0, jquery_1["default"])(this).val();
              (0, jquery_1["default"])('#organisation_identifier').val(identifier);
            });
            // add class to title of collection when validation error occurs on collection level
            subelement = document.querySelectorAll('.subelement');
            for (i = 0; i < subelement.length; i++) {
              title = subelement[i].querySelector('.control-label');
              errorContainer = subelement[i].querySelector('.collection_error');
              childCount = errorContainer === null || errorContainer === void 0 ? void 0 : errorContainer.childElementCount;
              if (childCount && childCount > 0) {
                title === null || title === void 0 ? void 0 : title.classList.add('error-title');
              }
            }
            // Adding cursor not allowed to <select> where elementJsonSchema read_only : true
            readOnlySelects = document.querySelectorAll('select.cursor-not-allowed');
            for (_i = 0; _i < readOnlySelects.length; _i++) {
              select = readOnlySelects[_i];
              selectElementParentWrapper = select.nextSibling;
              selectElementParent = selectElementParentWrapper === null || selectElementParentWrapper === void 0 ? void 0 : selectElementParentWrapper.firstChild;
              selectElement = selectElementParent === null || selectElementParent === void 0 ? void 0 : selectElementParent.firstChild;
              if (selectElement) {
                selectElement.style.cursor = 'not-allowed';
              }
            }
            deleteButtons = document.querySelectorAll('.delete-parent-selector');
            deleteButtons.forEach(function (button) {
              return changeDeleteButtonInnerHtml(button);
            });
            observer = new MutationObserver(function (mutationsList) {
              mutationsList.forEach(function (mutation) {
                if (mutation.addedNodes.length > 0) {
                  mutation.addedNodes.forEach(function (node) {
                    if (node instanceof Element) {
                      if (node.matches('.delete-item-selector')) {
                        changeDeleteButtonInnerHtml(node);
                      } else {
                        var newDeleteButtons = node.querySelectorAll('.delete-item-selector');
                        newDeleteButtons.forEach(function (button) {
                          return changeDeleteButtonInnerHtml(button);
                        });
                      }
                    }
                  });
                }
              });
            });
            observer.observe(document.body, {
              childList: true,
              subtree: true
            });
            /**
             * This function does two main things:
             *
             * 1. Adds a click event listener to the button to control the collapsible flow:
             *    - It finds the closest <label> element related to the button.
             *    - Within that <label>, it looks for an element with the class 'optional-text'. If it finds 'optional-text', it toggles how that text is displayed (either with brackets or an icon).
             *    - It also locates the nearest parent element with the classes 'subelement rounded-t-sm'. If that parent subelement exists, it toggles its state to either collapse or expand the form section.
             *    - Finally, it rotates the collapse button each time it’s clicked.
             *
             * 2. It triggers the button click event if the subelement is optional using the flag: thisButtonBelongsToOptionalForm.
             *    This ensures optional forms start off collapsed by default when rendered.
             *
             * @param button - The button element that manages the collapsible form section.
             */

            /**
             * Check if any error message exists in the subelement.
             *
             * @param subelement
             */

            /**
             * Returns closest <label> element.
             *
             * @param button
             */

            /**
             * Returns closest element with class 'optional-text'.
             *
             * @param label
             */

            /**
             * Returns the first Nth parent that has class 'subelement'.
             *
             * @param label
             */

            /**
             * Toggles what is rendered on optional text. (dot or bracket)
             *
             * @param optionalLabel
             * @param currentLanguage
             */

            /**
             * Toggles collapsed state. (expand or collapsed)
             *
             * Key considerations:
             * 1. The "Add Additional" button can be either inside or outside the subelement.
             * 2. When the button is outside, it will always be the immediate sibling to the subelement.
             * 3. The collapse mechanism is handled by adjusting the max height to give the illusion of sliding up.
             * 4. If the button is outside the subelement, the slide-up effect will not affect the button.
             *    Therefore, we toggle the 'display-none' class to control its visibility.
             *
             * @param subelement
             */

            /**
             * This function handles the forms rendered on initial page load.
             */

            /**
             * This function handles the forms rendered on clicking 'ADD ADDITIONAL X' button.
             */

            attachInitialCollapsableButtonEvents(currentLanguage);
            observeNewCollapsableButtons(currentLanguage);
          case 40:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
});
function escapeHtml(unsafe) {
  return unsafe.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#039;');
}
/*
 *
 * Help Text Open Close Handlers Start
 *
 */
(0, jquery_1["default"])(document).on('click', function (event) {
  if (!(0, jquery_1["default"])(event.target).closest('.help').length) {
    (0, jquery_1["default"])('.help__text').removeAttr('style');
  }
});
(0, jquery_1["default"])(document).on('click', '.help', function (event) {
  event.stopPropagation();
  console.log('Hello');
  (0, jquery_1["default"])('.help__text').removeAttr('style');
  var helpText = (0, jquery_1["default"])(this).find('.help__text');
  if (helpText.length > 0) {
    helpText.css({
      opacity: '1',
      visibility: 'visible'
    });
  }
  if ((0, jquery_1["default"])(event.target).closest('.close-help').length) {
    closeHelpText(helpText);
  }
});
(0, jquery_1["default"])(document).on('keydown', function (event) {
  if (event.key === 'Escape') {
    (0, jquery_1["default"])('.help__text').each(function () {
      closeHelpText((0, jquery_1["default"])(this));
    });
  }
});
/**
 * Closes the help text tooltip by setting its CSS properties to make it invisible and non-interactive.
 * After a delay, it removes the inline styles to reset the element's state.
 *
 * @param helpText - The jQuery object representing the tooltip element to be closed.
 */
function closeHelpText(helpText) {
  helpText.css({
    'pointer-events': 'none',
    opacity: '0',
    visibility: 'invisible'
  });
  setTimeout(function () {
    helpText.removeAttr('style');
  }, 1000);
}
/*
 *
 * Help Text Open Close Handlers End
 *
 */

/***/ }),

/***/ "./resources/assets/js/services/language.ts":
/*!**************************************************!*\
  !*** ./resources/assets/js/services/language.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {



function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
var axios_1 = __importDefault(__webpack_require__(/*! axios */ "./node_modules/axios/dist/browser/axios.cjs"));
var apiClient = axios_1["default"].create({
  baseURL: '/'
});
var LanguageService = /*#__PURE__*/function () {
  function LanguageService() {
    _classCallCheck(this, LanguageService);
  }
  _createClass(LanguageService, null, [{
    key: "handleError",
    value: function handleError(error) {
      console.error('API call failed:', error);
      throw error;
    }
  }, {
    key: "getLanguage",
    value: function getLanguage() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var response;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return apiClient.get('/current-language');
              case 3:
                response = _context.sent;
                return _context.abrupt("return", response.data.data);
              case 7:
                _context.prev = 7;
                _context.t0 = _context["catch"](0);
                this.handleError(_context.t0);
              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 7]]);
      }));
    }
  }, {
    key: "changeLanguage",
    value: function changeLanguage(language) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        var response;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;
                _context2.next = 3;
                return apiClient.get("/language/".concat(language));
              case 3:
                response = _context2.sent;
                return _context2.abrupt("return", response.data);
              case 7:
                _context2.prev = 7;
                _context2.t0 = _context2["catch"](0);
                this.handleError(_context2.t0);
              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[0, 7]]);
      }));
    }
  }, {
    key: "getTranslatedData",
    value: function getTranslatedData(queries) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        var response;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.prev = 0;
                _context3.next = 3;
                return apiClient.get("/translated-data", {
                  params: {
                    folders: queries
                  }
                });
              case 3:
                response = _context3.sent;
                return _context3.abrupt("return", response.data);
              case 7:
                _context3.prev = 7;
                _context3.t0 = _context3["catch"](0);
                this.handleError(_context3.t0);
              case 10:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[0, 7]]);
      }));
    }
  }]);
  return LanguageService;
}();
exports["default"] = LanguageService;

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["/js/vendor"], () => (__webpack_exec__("./resources/assets/js/scripts/formbuilder.ts")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,